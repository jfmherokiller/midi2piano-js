{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/downloadjs/download.js","node_modules/midi-file-parser/index.js","src/app.js","src/processing.js","src/utilityfunctions.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","root","factory","define","amd","download","this","data","strFileName","strMimeType","dataUrlToBlob","strUrl","parts","split","type","decoder","atob","decodeURIComponent","binData","pop","mx","uiArr","Uint8Array","charCodeAt","myBlob","saver","url","winMode","anchor","href","setAttribute","fileName","className","innerHTML","style","display","document","body","appendChild","setTimeout","click","removeChild","self","URL","revokeObjectURL","test","navigator","userAgent","replace","defaultMime","window","open","confirm","location","createElement","src","blob","reader","mimeType","payload","toString","String","Blob","MozBlob","WebKitBlob","bind","indexOf","ajax","XMLHttpRequest","responseType","onload","target","response","send","msSaveBlob","tempUiArr","createObjectURL","constructor","btoa","y","encodeURIComponent","FileReader","result","readAsDataURL","MidiFile","readChunk","stream","id","read","readInt32","readEvent","event","deltaTime","readVarInt","eventTypeByte","readInt8","subtypeByte","subtype","number","readInt16","text","channel","microsecondsPerBeat","hourByte","frameRate","0","32","64","96","hour","min","sec","frame","subframe","numerator","denominator","Math","pow","metronome","thirtyseconds","key","scale","param1","lastEventTypeByte","eventType","noteNumber","velocity","amount","controllerType","value","programNumber","Stream","headerChunk","headerStream","formatType","trackCount","timeDivision","ticksPerBeat","header","tracks","trackChunk","trackStream","eof","push","str","substr","position","signed","b","file","processing_1","readFile","evt","files","addEventListener","parsethefile","readAsBinaryString","getElementById","midi","midicontent","midiparse","tempo","utilityfunctions_1","GetTempo","dblines","CreateDBLines","getnotes","CreateFileString","join","console","log","getTempo","filter","x","round","notes","_i","_a","midievent","k","splice","createWaveChannelBlocks","needed","baseblock","notetracknum","concat","ConstructLoopBlocks","noteblocks","ConstructBodyOfFile","NumberOfTracks","longesttrack","createFileString","dblinesin","longestTrack","map","max","apply","dblinesin_1","dbline"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,ICSA,SAAAK,EAAAC,GACA,kBAAAC,SAAAA,OAAAC,IAEAD,UAAAD,GACA,gBAAAN,GAIAI,EAAAJ,QAAAM,IAGAD,EAAAI,SAAAH,KAEAI,KAAA,WAEA,MAAA,SAAAD,GAAAE,EAAAC,EAAAC,GA8DA,QAAAC,GAAAC,GACA,GAAAC,GAAAD,EAAAE,MAAA,SACAC,EAAAF,EAAA,GACAG,EAAA,UAAAH,EAAA,GAAAI,KAAAC,mBACAC,EAAAH,EAAAH,EAAAO,OACAC,EAAAF,EAAApB,OACAP,EAAA,EACA8B,EAAA,GAAAC,YAAAF,EAEA,KAAA7B,EAAAA,EAAA6B,IAAA7B,EAAA8B,EAAA9B,GAAA2B,EAAAK,WAAAhC,EAEA,OAAA,IAAAiC,IAAAH,IAAAP,KAAAA,IAGA,QAAAW,GAAAC,EAAAC,GAEA,GAAA,YAAAC,GAYA,MAXAA,GAAAC,KAAAH,EACAE,EAAAE,aAAA,WAAAC,GACAH,EAAAI,UAAA,mBACAJ,EAAAK,UAAA,iBACAL,EAAAM,MAAAC,QAAA,OACAC,SAAAC,KAAAC,YAAAV,GACAW,WAAA,WACAX,EAAAY,QACAJ,SAAAC,KAAAI,YAAAb,GACAD,KAAA,GAAAY,WAAA,WAAAG,EAAAC,IAAAC,gBAAAhB,EAAAC,OAAA,MACA,KACA,CAIA,IAAA,gDAAAgB,KAAAC,UAAAC,WAKA,MAJA,SAAAF,KAAAnB,KAAAA,EAAA,QAAAA,EAAAsB,QAAA,sBAAAC,IACAC,OAAAC,KAAAzB,IACA0B,QAAA,oGAAAC,SAAAxB,KAAAH,IAEA,CAIA,IAAAlC,GAAA4C,SAAAkB,cAAA,SACAlB,UAAAC,KAAAC,YAAA9C,IAEAmC,GAAA,SAAAkB,KAAAnB,KACAA,EAAA,QAAAA,EAAAsB,QAAA,sBAAAC,IAEAzD,EAAA+D,IAAA7B,EACAa,WAAA,WAAAH,SAAAC,KAAAI,YAAAjD,IAAA,KA5GA,GASAgE,GACAC,EAVAf,EAAAQ,OACAD,EAAA,2BACAS,EAAAjD,GAAAwC,EACAU,EAAApD,EACAmB,GAAAlB,IAAAC,GAAAkD,EACA/B,EAAAQ,SAAAkB,cAAA,KACAM,EAAA,SAAAvE,GAAA,MAAAwE,QAAAxE,IACAmC,EAAAkB,EAAAoB,MAAApB,EAAAqB,SAAArB,EAAAsB,YAAAJ,EACA7B,EAAAvB,GAAA,UAYA,IATAgB,EAAAA,EAAA3B,KAAA2B,EAAAyC,KAAAvB,GAAAoB,KAEA,SAAAD,OAAAvD,QACAqD,GAAAA,EAAAD,GACAA,EAAAC,EAAA,GACAA,EAAAA,EAAA,IAIAjC,GAAAA,EAAA5B,OAAA,OACAiC,EAAAL,EAAAb,MAAA,KAAAM,MAAAN,MAAA,KAAA,GACAe,EAAAC,KAAAH,EACAE,EAAAC,KAAAqC,QAAAxC,MAAA,GAAA,CACA,GAAAyC,GAAA,GAAAC,eAOA,OANAD,GAAAhB,KAAA,MAAAzB,GAAA,GACAyC,EAAAE,aAAA,OACAF,EAAAG,OAAA,SAAAxF,GACAuB,EAAAvB,EAAAyF,OAAAC,SAAAzC,EAAAkB,IAEAV,WAAA,WAAA4B,EAAAM,QAAA,GACAN,EAMA,GAAA,kCAAAtB,KAAAc,GAAA,CAEA,KAAAA,EAAA7D,OAAA,aAAA0B,IAAAoC,GAIA,MAAAd,WAAA4B,WACA5B,UAAA4B,WAAAhE,EAAAiD,GAAA5B,GACAN,EAAAkC,EALAA,GAAAjD,EAAAiD,GACAD,EAAAC,EAAA7C,MAAAmC,MAQA,IAAA,gBAAAJ,KAAAc,GAAA,CACA,GAAApE,GAAA,EAAAoF,EAAA,GAAArD,YAAAqC,EAAA7D,QAAAsB,EAAAuD,EAAA7E,MACA,KAAAP,EAAAA,EAAA6B,IAAA7B,EAAAoF,EAAApF,GAAAoE,EAAApC,WAAAhC,EACAoE,GAAA,GAAAnC,IAAAmD,IAAA7D,KAAA4C,IA+DA,GA5DAF,EAAAG,YAAAnC,GACAmC,EACA,GAAAnC,IAAAmC,IAAA7C,KAAA4C,IA0DAZ,UAAA4B,WACA,MAAA5B,WAAA4B,WAAAlB,EAAAzB,EAGA,IAAAW,EAAAC,IACAlB,EAAAiB,EAAAC,IAAAiC,gBAAApB,IAAA,OACA,CAEA,GAAA,gBAAAA,IAAAA,EAAAqB,cAAAjB,EACA,IACA,MAAAnC,GAAA,QAAAiC,EAAA,WAAAhB,EAAAoC,KAAAtB,IACA,MAAAuB,GACA,MAAAtD,GAAA,QAAAiC,EAAA,IAAAsB,mBAAAxB,IAKAC,EAAA,GAAAwB,YACAxB,EAAAa,OAAA,SAAAxF,GACA2C,EAAAnB,KAAA4E,SAEAzB,EAAA0B,cAAA3B,GAEA,OAAA,6BC5JA,QAAA4B,GAAA7E,GACA,QAAA8E,GAAAC,GACA,GAAAC,GAAAD,EAAAE,KAAA,GACA1F,EAAAwF,EAAAG,WACA,QACAF,GAAAA,EACAzF,OAAAA,EACAS,KAAA+E,EAAAE,KAAA1F,IAMA,QAAA4F,GAAAJ,GACA,GAAAK,KACAA,GAAAC,UAAAN,EAAAO,YACA,IAAAC,GAAAR,EAAAS,UACA,IAAA,MAAA,IAAAD,GAAA,CAEA,GAAA,KAAAA,EAAA,CAEAH,EAAA7E,KAAA,MACA,IAAAkF,GAAAV,EAAAS,WACAjG,EAAAwF,EAAAO,YACA,QAAAG,GACA,IAAA,GAEA,GADAL,EAAAM,QAAA,iBACA,GAAAnG,EAAA,KAAA,sDAAAA,CAEA,OADA6F,GAAAO,OAAAZ,EAAAa,YACAR,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,OACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,kBACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,YACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,iBACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,SACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,SACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,GAGA,MAFAA,GAAAM,QAAA,WACAN,EAAAS,KAAAd,EAAAE,KAAA1F,GACA6F,CACA,KAAA,IAEA,GADAA,EAAAM,QAAA,oBACA,GAAAnG,EAAA,KAAA,yDAAAA,CAEA,OADA6F,GAAAU,QAAAf,EAAAS,WACAJ,CACA,KAAA,IAEA,GADAA,EAAAM,QAAA,aACA,GAAAnG,EAAA,KAAA,kDAAAA,CACA,OAAA6F,EACA,KAAA,IAEA,GADAA,EAAAM,QAAA,WACA,GAAAnG,EAAA,KAAA,gDAAAA,CAMA,OALA6F,GAAAW,qBACAhB,EAAAS,YAAA,KACAT,EAAAS,YAAA,GACAT,EAAAS,WAEAJ,CACA,KAAA,IAEA,GADAA,EAAAM,QAAA,cACA,GAAAnG,EAAA,KAAA,mDAAAA,CACA,IAAAyG,GAAAjB,EAAAS,UASA,OARAJ,GAAAa,WACAC,EAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,IACA,GAAAL,GACAZ,EAAAkB,KAAA,GAAAN,EACAZ,EAAAmB,IAAAxB,EAAAS,WACAJ,EAAAoB,IAAAzB,EAAAS,WACAJ,EAAAqB,MAAA1B,EAAAS,WACAJ,EAAAsB,SAAA3B,EAAAS,WACAJ,CACA,KAAA,IAEA,GADAA,EAAAM,QAAA,gBACA,GAAAnG,EAAA,KAAA,qDAAAA,CAKA,OAJA6F,GAAAuB,UAAA5B,EAAAS,WACAJ,EAAAwB,YAAAC,KAAAC,IAAA,EAAA/B,EAAAS,YACAJ,EAAA2B,UAAAhC,EAAAS,WACAJ,EAAA4B,cAAAjC,EAAAS,WACAJ,CACA,KAAA,IAEA,GADAA,EAAAM,QAAA,eACA,GAAAnG,EAAA,KAAA,oDAAAA,CAGA,OAFA6F,GAAA6B,IAAAlC,EAAAS,UAAA,GACAJ,EAAA8B,MAAAnC,EAAAS,WACAJ,CACA,KAAA,KAGA,MAFAA,GAAAM,QAAA,oBACAN,EAAApF,KAAA+E,EAAAE,KAAA1F,GACA6F,CACA,SAIA,MAFAA,GAAAM,QAAA,UACAN,EAAApF,KAAA+E,EAAAE,KAAA1F,GACA6F,EAGA,MADAA,GAAApF,KAAA+E,EAAAE,KAAA1F,GACA6F,EACA,GAAA,KAAAG,EAAA,CACAH,EAAA7E,KAAA,OACA,IAAAhB,GAAAwF,EAAAO,YAEA,OADAF,GAAApF,KAAA+E,EAAAE,KAAA1F,GACA6F,EACA,GAAA,KAAAG,EAAA,CACAH,EAAA7E,KAAA,cACA,IAAAhB,GAAAwF,EAAAO,YAEA,OADAF,GAAApF,KAAA+E,EAAAE,KAAA1F,GACA6F,EAEA,KAAA,sCAAAG,EAIA,GAAA4B,EACA,KAAA,IAAA5B,IAIA4B,EAAA5B,EACAA,EAAA6B,IAEAD,EAAApC,EAAAS,WACA4B,EAAA7B,EAEA,IAAA8B,GAAA9B,GAAA,CAGA,QAFAH,EAAAU,QAAA,GAAAP,EACAH,EAAA7E,KAAA,UACA8G,GACA,IAAA,GAIA,MAHAjC,GAAAM,QAAA,UACAN,EAAAkC,WAAAH,EACA/B,EAAAmC,SAAAxC,EAAAS,WACAJ,CACA,KAAA,GAQA,MAPAA,GAAAkC,WAAAH,EACA/B,EAAAmC,SAAAxC,EAAAS,WACA,GAAAJ,EAAAmC,SACAnC,EAAAM,QAAA,UAEAN,EAAAM,QAAA,SAEAN,CACA,KAAA,IAIA,MAHAA,GAAAM,QAAA,iBACAN,EAAAkC,WAAAH,EACA/B,EAAAoC,OAAAzC,EAAAS,WACAJ,CACA,KAAA,IAIA,MAHAA,GAAAM,QAAA,aACAN,EAAAqC,eAAAN,EACA/B,EAAAsC,MAAA3C,EAAAS,WACAJ,CACA,KAAA,IAGA,MAFAA,GAAAM,QAAA,gBACAN,EAAAuC,cAAAR,EACA/B,CACA,KAAA,IAGA,MAFAA,GAAAM,QAAA,oBACAN,EAAAoC,OAAAL,EACA/B,CACA,KAAA,IAGA,MAFAA,GAAAM,QAAA,YACAN,EAAAsC,MAAAP,GAAApC,EAAAS,YAAA,GACAJ,CACA,SACA,KAAA,iCAAAiC,GA3KA,GAAAD,EAsLArC,QAAA6C,EAAA5H,EACA,IAAA6H,GAAA/C,EAAAC,OACA,IAAA,QAAA8C,EAAA7C,IAAA,GAAA6C,EAAAtI,OACA,KAAA,kCAEA,IAAAuI,GAAAF,EAAAC,EAAA7H,MACA+H,EAAAD,EAAAlC,YACAoC,EAAAF,EAAAlC,YACAqC,EAAAH,EAAAlC,WAEA,IAAA,MAAAqC,EACA,KAAA,+DAEAC,cAAAD,CASA,KAAA,GANAE,IACAJ,WAAAA,EACAC,WAAAA,EACAE,aAAAA,cAEAE,KACApJ,EAAA,EAAAA,EAAAmJ,EAAAH,WAAAhJ,IAAA,CACAoJ,EAAApJ,KACA,IAAAqJ,GAAAvD,EAAAC,OACA,IAAA,QAAAsD,EAAArD,GACA,KAAA,yCAAAqD,EAAArD,EAGA,KADA,GAAAsD,GAAAV,EAAAS,EAAArI,OACAsI,EAAAC,OAAA,CACA,GAAAnD,GAAAD,EAAAmD,EACAF,GAAApJ,GAAAwJ,KAAApD,IAKA,OACA+C,OAAAA,EACAC,OAAAA,GAKA,QAAAR,GAAAa,GAGA,QAAAxD,GAAA1F,GACA,GAAAoF,GAAA8D,EAAAC,OAAAC,EAAApJ,EAEA,OADAoJ,IAAApJ,EACAoF,EAIA,QAAAO,KACA,GAAAP,IACA8D,EAAAzH,WAAA2H,IAAA,KACAF,EAAAzH,WAAA2H,EAAA,IAAA,KACAF,EAAAzH,WAAA2H,EAAA,IAAA,GACAF,EAAAzH,WAAA2H,EAAA,EAEA,OADAA,IAAA,EACAhE,EAIA,QAAAiB,KACA,GAAAjB,IACA8D,EAAAzH,WAAA2H,IAAA,GACAF,EAAAzH,WAAA2H,EAAA,EAEA,OADAA,IAAA,EACAhE,EAIA,QAAAa,GAAAoD,GACA,GAAAjE,GAAA8D,EAAAzH,WAAA2H,EAGA,OAFAC,IAAAjE,EAAA,MAAAA,GAAA,KACAgE,GAAA,EACAhE,EAGA,QAAA4D,KACA,MAAAI,IAAAF,EAAAlJ,OAOA,QAAA+F,KAEA,IADA,GAAAX,GAAA,IACA,CACA,GAAAkE,GAAArD,GACA,MAAA,IAAAqD,GAKA,MAAAlE,GAAAkE,CAJAlE,IAAA,IAAAkE,EACAlE,IAAA,GAlDA,GAAAgE,GAAA,CA0DA,QACAJ,IAAAA,EACAtD,KAAAA,EACAC,UAAAA,EACAU,UAAAA,EACAJ,SAAAA,EACAF,WAAAA,GAjTA7F,EAAAJ,QAAA,SAAAyJ,GACA,MAAAjE,GAAAiE,4BCLA,YACA,IAAAC,GAAAhK,EAAA,eACA4D,QAAAoB,OAAA,WAEA,QAAAiF,GAAAC,GACA,GAAAC,GAAAD,EAAAjF,OAAAkF,MACAJ,EAAAI,EAAA,GACAhG,EAAA,GAAAwB,WACA,IAAAA,WACAxB,GAAAiG,iBAAA,OAAA,WACAJ,EAAAK,aAAAlG,EAAAyB,UAEAzB,EAAAmG,mBAAAP,GATAjH,SAAAyH,eAAA,QAAAH,iBAAA,SAAAH,GAAA,4CCHA,YAGA,SAAAI,GAAAG,GACA,GAAAC,GAAAC,EAAAF,GACAG,EAAAC,EAAAC,SAAAJ,GACAK,EAAAF,EAAAG,cAAAH,EAAAI,SAAAP,IACAV,EAAAa,EAAAK,iBAAAH,EAAAH,GACA5J,EAAAf,EAAA,aACAe,GAAAgJ,EAAAmB,KAAA,IAAA,eAAA,cACAC,QAAAC,IAAA,WATA,GAAAV,GAAA1K,EAAA,oBACA4K,EAAA5K,EAAA,qBAUAM,GAAA+J,aAAAA,kFCZA,YAIA,SAAAgB,GAAAb,GACA,GAAAG,GAAAH,EAAAnB,OAAA,GAAAiC,OAAA,SAAAC,GAAA,MAAA,OAAAA,EAAAvE,sBAAA,GAAAA,mBAGA,OAFA2D,GAAA,IAAAA,EACAA,EAAA7C,KAAA0D,MAAAb,GACA,GAAAA,EAGA,QAAAK,GAAAR,GAEA,IAAA,GADAiB,MACAxL,EAAA,EAAAA,EAAAuK,EAAAnB,OAAA7I,OAAAP,IAAA,CACAwL,EAAAxL,KACA,KAAA,GAAAyL,GAAA,EAAAC,EAAAnB,EAAAnB,OAAApJ,GAAAyL,EAAAC,EAAAnL,OAAAkL,IAAA,CACA,GAAAE,GAAAD,EAAAD,EACA,MAAAE,EAAA7E,UACA,WAAA6E,EAAAjF,SACA8E,EAAAxL,GAAAwJ,KAAAmC,EAAArD,YAEA,YAAAqD,EAAAjF,SACA8E,EAAAxL,GAAAwJ,MAAA,KAKA,IAAA,GAAAoC,GAAA,EAAAA,EAAAJ,EAAAjL,OAAAqL,IACA,IAAAJ,EAAAI,GAAArL,QACAiL,EAAAK,OAAAD,EAAA,EAGA,OAAAJ,GAGA,QAAAM,GAAAC,GACA,GAAAC,KAOA,IANAA,EAAAxC,KAAA,8CACAwC,EAAAxC,KAAA,uBACAwC,EAAAxC,KAAA,iBACAwC,EAAAxC,KAAA,qBACAwC,EAAAxC,KAAA,gBACAwC,EAAAxC,KAAA,MACAuC,EAAA,EACA,IAAA,GAAA/L,GAAA,EAAAA,EAAA+L,EAAA/L,IACAgM,EAAAxC,KAAA,gCAAAxJ,EAAA,eACAgM,EAAAxC,KAAA,QAAAxJ,EAAA,iBACAgM,EAAAxC,KAAA,UAAAxJ,EAAA,IAAAA,EAAA,OACAgM,EAAAxC,KAAA,YAAAxJ,EAAA,WACAgM,EAAAxC,KAAA,WAAAxJ,EAAA,OACAgM,EAAAxC,KAAA,KAGA,OAAAwC,GAEA,QAAAlB,GAAAU,GAEA,IAAA,GADAX,MACAoB,EAAA,EAAAA,EAAAT,EAAAjL,OAAA0L,IAAA,CAGA,IAFApB,EAAAoB,MACApB,EAAAoB,GAAAzC,KAAA,QAAAyC,EAAA,OACAT,EAAAS,GAAA1L,QACAsK,EAAAoB,GAAAzC,KAAA,MAAA0C,OAAAV,EAAAS,GAAAJ,OAAA,EAAA,IAAAZ,KAAA,OAAAiB,OAAA,OAEArB,GAAAoB,GAAAzC,KAAA,yBAEA,MAAAqB,GAGA,QAAAsB,GAAAJ,GACA,GAAAK,KAOA,IANAA,EAAA5C,KAAA,oBACA4C,EAAA5C,KAAA,eACA4C,EAAA5C,KAAA,+BACA4C,EAAA5C,KAAA,kBACA4C,EAAA5C,KAAA,qBACA4C,EAAA5C,KAAA,MACAuC,EAAA,EACA,IAAA,GAAA/L,GAAA,EAAAA,EAAA+L,EAAA/L,IACAoM,EAAA5C,KAAA,gBAAAxJ,EAAA,MACAoM,EAAA5C,KAAA,eACA4C,EAAA5C,KAAA,mBAAAxJ,EAAA,cACAoM,EAAA5C,KAAA,kBACA4C,EAAA5C,KAAA,WAAAxJ,EAAA,YACAoM,EAAA5C,KAAA,KAGA,OAAA4C,GAEA,QAAAC,GAAAC,EAAAC,EAAA7B,GACA,GAAAZ,KAqCA,OApCAA,GAAAN,KAAA,yBACAM,EAAAN,KAAA,0BAAA+C,EAAA,QACAzC,EAAAN,KAAA,MACAM,EAAAN,KAAA,iBACAM,EAAAN,KAAA,OACAM,EAAAN,KAAA,aAAAkB,EAAA,OACAZ,EAAAN,KAAA,MACAM,EAAAA,EAAAoC,OAAAC,EAAAG,IACAxC,EAAAN,KAAA,kBACAM,EAAAN,KAAA,0BACAM,EAAAN,KAAA,MACAM,EAAAN,KAAA,mBACAM,EAAAN,KAAA,eACAM,EAAAN,KAAA,OACAM,EAAAN,KAAA,MACAM,EAAAN,KAAA,qDACAM,EAAAN,KAAA,6BACAM,EAAAN,KAAA,OACAM,EAAAN,KAAA,0BACAM,EAAAN,KAAA,iEACAM,EAAAN,KAAA,OACAM,EAAAN,KAAA,MACAM,EAAAN,KAAA,uCACAM,EAAAN,KAAA,6BACAM,EAAAN,KAAA,OACAM,EAAAN,KAAA,6BACAM,EAAAN,KAAA,2BACAM,EAAAN,KAAA,8BACAM,EAAAN,KAAA,OACAM,EAAAN,KAAA,MACAM,EAAAN,KAAA,oBACAM,EAAAN,KAAA,qBACAM,EAAAN,KAAA,4BACAM,EAAAN,KAAA,MACAM,EAAAN,KAAA,4CACAM,EAAAN,KAAA,MACAM,EAEA,QAAA0C,GAAAC,EAAA/B,GACA,GAAAgC,GAAAD,EAAAE,IAAA,SAAA7M,GACA,MAAAA,GAAAS,SACAoE,QAAAkD,KAAA+E,IAAAC,MAAAhF,KAAA4E,EAAAE,IAAA,SAAA7M,GACA,MAAAA,GAAAS,WAEAuJ,EAAAgC,EAAAW,EAAAlM,OACAuJ,GAAAA,EAAAoC,OAAAG,EAAAI,EAAAlM,OAAAmM,EAAAhC,GAEA,KAAA,GAAAe,GAAA,EAAAqB,EAAAL,EAAAhB,EAAAqB,EAAAvM,OAAAkL,IAAA,CACA,GAAAsB,GAAAD,EAAArB,EACA3B,GAAAA,EAAAoC,OAAAa,GACAjD,EAAAN,KAAA,MAEA,MAAAM,GApIAzJ,EAAAuK,SAAAQ,EAwBA/K,EAAA0K,SAAAA,EAiCA1K,EAAAyK,cAAAA,EA6EAzK,EAAA2K,iBAAAwB","file":"data.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data\\:[\\w+\\-]+\\/[\\w+\\-\\.]+[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n","// https://github.com/gasman/jasmid\n//\n//\n\nmodule.exports = function(file){\n\treturn MidiFile(file)\n};\n\nfunction MidiFile(data) {\n\tfunction readChunk(stream) {\n\t\tvar id = stream.read(4);\n\t\tvar length = stream.readInt32();\n\t\treturn {\n\t\t\t'id': id,\n\t\t\t'length': length,\n\t\t\t'data': stream.read(length)\n\t\t};\n\t}\n\t\n\tvar lastEventTypeByte;\n\t\n\tfunction readEvent(stream) {\n\t\tvar event = {};\n\t\tevent.deltaTime = stream.readVarInt();\n\t\tvar eventTypeByte = stream.readInt8();\n\t\tif ((eventTypeByte & 0xf0) == 0xf0) {\n\t\t\t/* system / meta event */\n\t\t\tif (eventTypeByte == 0xff) {\n\t\t\t\t/* meta event */\n\t\t\t\tevent.type = 'meta';\n\t\t\t\tvar subtypeByte = stream.readInt8();\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tswitch(subtypeByte) {\n\t\t\t\t\tcase 0x00:\n\t\t\t\t\t\tevent.subtype = 'sequenceNumber';\n\t\t\t\t\t\tif (length != 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\n\t\t\t\t\t\tevent.number = stream.readInt16();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x01:\n\t\t\t\t\t\tevent.subtype = 'text';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x02:\n\t\t\t\t\t\tevent.subtype = 'copyrightNotice';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x03:\n\t\t\t\t\t\tevent.subtype = 'trackName';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x04:\n\t\t\t\t\t\tevent.subtype = 'instrumentName';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x05:\n\t\t\t\t\t\tevent.subtype = 'lyrics';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x06:\n\t\t\t\t\t\tevent.subtype = 'marker';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x07:\n\t\t\t\t\t\tevent.subtype = 'cuePoint';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x20:\n\t\t\t\t\t\tevent.subtype = 'midiChannelPrefix';\n\t\t\t\t\t\tif (length != 1) throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\n\t\t\t\t\t\tevent.channel = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x2f:\n\t\t\t\t\t\tevent.subtype = 'endOfTrack';\n\t\t\t\t\t\tif (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x51:\n\t\t\t\t\t\tevent.subtype = 'setTempo';\n\t\t\t\t\t\tif (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\n\t\t\t\t\t\tevent.microsecondsPerBeat = (\n\t\t\t\t\t\t\t(stream.readInt8() << 16)\n\t\t\t\t\t\t\t+ (stream.readInt8() << 8)\n\t\t\t\t\t\t\t+ stream.readInt8()\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x54:\n\t\t\t\t\t\tevent.subtype = 'smpteOffset';\n\t\t\t\t\t\tif (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\n\t\t\t\t\t\tvar hourByte = stream.readInt8();\n\t\t\t\t\t\tevent.frameRate = {\n\t\t\t\t\t\t\t0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\n\t\t\t\t\t\t}[hourByte & 0x60];\n\t\t\t\t\t\tevent.hour = hourByte & 0x1f;\n\t\t\t\t\t\tevent.min = stream.readInt8();\n\t\t\t\t\t\tevent.sec = stream.readInt8();\n\t\t\t\t\t\tevent.frame = stream.readInt8();\n\t\t\t\t\t\tevent.subframe = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x58:\n\t\t\t\t\t\tevent.subtype = 'timeSignature';\n\t\t\t\t\t\tif (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\n\t\t\t\t\t\tevent.numerator = stream.readInt8();\n\t\t\t\t\t\tevent.denominator = Math.pow(2, stream.readInt8());\n\t\t\t\t\t\tevent.metronome = stream.readInt8();\n\t\t\t\t\t\tevent.thirtyseconds = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x59:\n\t\t\t\t\t\tevent.subtype = 'keySignature';\n\t\t\t\t\t\tif (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\n\t\t\t\t\t\tevent.key = stream.readInt8(true);\n\t\t\t\t\t\tevent.scale = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x7f:\n\t\t\t\t\t\tevent.subtype = 'sequencerSpecific';\n\t\t\t\t\t\tevent.data = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\n\t\t\t\t\t\tevent.subtype = 'unknown'\n\t\t\t\t\t\tevent.data = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else if (eventTypeByte == 0xf0) {\n\t\t\t\tevent.type = 'sysEx';\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else if (eventTypeByte == 0xf7) {\n\t\t\t\tevent.type = 'dividedSysEx';\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else {\n\t\t\t\tthrow \"Unrecognised MIDI event type byte: \" + eventTypeByte;\n\t\t\t}\n\t\t} else {\n\t\t\t/* channel event */\n\t\t\tvar param1;\n\t\t\tif ((eventTypeByte & 0x80) == 0) {\n\t\t\t\t/* running status - reuse lastEventTypeByte as the event type.\n\t\t\t\t\teventTypeByte is actually the first parameter\n\t\t\t\t*/\n\t\t\t\tparam1 = eventTypeByte;\n\t\t\t\teventTypeByte = lastEventTypeByte;\n\t\t\t} else {\n\t\t\t\tparam1 = stream.readInt8();\n\t\t\t\tlastEventTypeByte = eventTypeByte;\n\t\t\t}\n\t\t\tvar eventType = eventTypeByte >> 4;\n\t\t\tevent.channel = eventTypeByte & 0x0f;\n\t\t\tevent.type = 'channel';\n\t\t\tswitch (eventType) {\n\t\t\t\tcase 0x08:\n\t\t\t\t\tevent.subtype = 'noteOff';\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.velocity = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x09:\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.velocity = stream.readInt8();\n\t\t\t\t\tif (event.velocity == 0) {\n\t\t\t\t\t\tevent.subtype = 'noteOff';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.subtype = 'noteOn';\n\t\t\t\t\t}\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0a:\n\t\t\t\t\tevent.subtype = 'noteAftertouch';\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.amount = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0b:\n\t\t\t\t\tevent.subtype = 'controller';\n\t\t\t\t\tevent.controllerType = param1;\n\t\t\t\t\tevent.value = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0c:\n\t\t\t\t\tevent.subtype = 'programChange';\n\t\t\t\t\tevent.programNumber = param1;\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0d:\n\t\t\t\t\tevent.subtype = 'channelAftertouch';\n\t\t\t\t\tevent.amount = param1;\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0e:\n\t\t\t\t\tevent.subtype = 'pitchBend';\n\t\t\t\t\tevent.value = param1 + (stream.readInt8() << 7);\n\t\t\t\t\treturn event;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"Unrecognised MIDI event type: \" + eventType\n\t\t\t\t\t/* \n\t\t\t\t\tconsole.log(\"Unrecognised MIDI event type: \" + eventType);\n\t\t\t\t\tstream.readInt8();\n\t\t\t\t\tevent.subtype = 'unknown';\n\t\t\t\t\treturn event;\n\t\t\t\t\t*/\n\t\t\t}\n\t\t}\n\t}\n\t\n\tstream = Stream(data);\n\tvar headerChunk = readChunk(stream);\n\tif (headerChunk.id != 'MThd' || headerChunk.length != 6) {\n\t\tthrow \"Bad .mid file - header not found\";\n\t}\n\tvar headerStream = Stream(headerChunk.data);\n\tvar formatType = headerStream.readInt16();\n\tvar trackCount = headerStream.readInt16();\n\tvar timeDivision = headerStream.readInt16();\n\t\n\tif (timeDivision & 0x8000) {\n\t\tthrow \"Expressing time division in SMTPE frames is not supported yet\"\n\t} else {\n\t\tticksPerBeat = timeDivision;\n\t}\n\t\n\tvar header = {\n\t\t'formatType': formatType,\n\t\t'trackCount': trackCount,\n\t\t'ticksPerBeat': ticksPerBeat\n\t}\n\tvar tracks = [];\n\tfor (var i = 0; i < header.trackCount; i++) {\n\t\ttracks[i] = [];\n\t\tvar trackChunk = readChunk(stream);\n\t\tif (trackChunk.id != 'MTrk') {\n\t\t\tthrow \"Unexpected chunk - expected MTrk, got \"+ trackChunk.id;\n\t\t}\n\t\tvar trackStream = Stream(trackChunk.data);\n\t\twhile (!trackStream.eof()) {\n\t\t\tvar event = readEvent(trackStream);\n\t\t\ttracks[i].push(event);\n\t\t\t//console.log(event);\n\t\t}\n\t}\n\t\n\treturn {\n\t\t'header': header,\n\t\t'tracks': tracks\n\t}\n};\n\n/* Wrapper for accessing strings through sequential reads */\nfunction Stream(str) {\n\tvar position = 0;\n\t\n\tfunction read(length) {\n\t\tvar result = str.substr(position, length);\n\t\tposition += length;\n\t\treturn result;\n\t}\n\t\n\t/* read a big-endian 32-bit integer */\n\tfunction readInt32() {\n\t\tvar result = (\n\t\t\t(str.charCodeAt(position) << 24)\n\t\t\t+ (str.charCodeAt(position + 1) << 16)\n\t\t\t+ (str.charCodeAt(position + 2) << 8)\n\t\t\t+ str.charCodeAt(position + 3));\n\t\tposition += 4;\n\t\treturn result;\n\t}\n\n\t/* read a big-endian 16-bit integer */\n\tfunction readInt16() {\n\t\tvar result = (\n\t\t\t(str.charCodeAt(position) << 8)\n\t\t\t+ str.charCodeAt(position + 1));\n\t\tposition += 2;\n\t\treturn result;\n\t}\n\t\n\t/* read an 8-bit integer */\n\tfunction readInt8(signed) {\n\t\tvar result = str.charCodeAt(position);\n\t\tif (signed && result > 127) result -= 256;\n\t\tposition += 1;\n\t\treturn result;\n\t}\n\t\n\tfunction eof() {\n\t\treturn position >= str.length;\n\t}\n\t\n\t/* read a MIDI-style variable-length integer\n\t\t(big-endian value in groups of 7 bits,\n\t\twith top bit set to signify that another byte follows)\n\t*/\n\tfunction readVarInt() {\n\t\tvar result = 0;\n\t\twhile (true) {\n\t\t\tvar b = readInt8();\n\t\t\tif (b & 0x80) {\n\t\t\t\tresult += (b & 0x7f);\n\t\t\t\tresult <<= 7;\n\t\t\t} else {\n\t\t\t\t/* b is the last byte */\n\t\t\t\treturn result + b;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn {\n\t\t'eof': eof,\n\t\t'read': read,\n\t\t'readInt32': readInt32,\n\t\t'readInt16': readInt16,\n\t\t'readInt8': readInt8,\n\t\t'readVarInt': readVarInt\n\t}\n}","\"use strict\";\r\nvar processing_1 = require(\"./processing\");\r\nwindow.onload = function () {\r\n    document.getElementById(\"file\").addEventListener(\"change\", readFile, false);\r\n    function readFile(evt) {\r\n        var files = evt.target.files;\r\n        var file = files[0];\r\n        var reader = new FileReader();\r\n        var preview = new FileReader();\r\n        reader.addEventListener(\"load\", function () {\r\n            processing_1.parsethefile(reader.result);\r\n        });\r\n        reader.readAsBinaryString(file);\r\n    }\r\n};\r\n//# sourceMappingURL=app.js.map","\"use strict\";\r\nvar midiparse = require(\"midi-file-parser\");\r\nvar utilityfunctions_1 = require(\"./utilityfunctions\");\r\nfunction parsethefile(midi) {\r\n    var midicontent = midiparse(midi);\r\n    var tempo = utilityfunctions_1.GetTempo(midicontent);\r\n    var dblines = utilityfunctions_1.CreateDBLines(utilityfunctions_1.getnotes(midicontent));\r\n    var file = utilityfunctions_1.CreateFileString(dblines, tempo);\r\n    var download = require(\"downloadjs\");\r\n    download(file.join(\"\"), \"songtest.txt\", \"text/plain\");\r\n    console.log(\"AAAAAAA\");\r\n}\r\nexports.parsethefile = parsethefile;\r\n//# sourceMappingURL=processing.js.map","\"use strict\";\r\n/**\r\n * Created by jfmmeyers on 9/14/16.\r\n */\r\nfunction getTempo(midi) {\r\n    var tempo = midi.tracks[0].filter(function (x) { return x.microsecondsPerBeat != null; })[0].microsecondsPerBeat;\r\n    tempo = 60000000 / tempo;\r\n    tempo = Math.round(tempo);\r\n    return tempo * 10;\r\n}\r\nexports.GetTempo = getTempo;\r\nfunction getnotes(midi) {\r\n    var notes = [];\r\n    for (var i = 0; i < midi.tracks.length; i++) {\r\n        notes[i] = [];\r\n        for (var _i = 0, _a = midi.tracks[i]; _i < _a.length; _i++) {\r\n            var midievent = _a[_i];\r\n            if (midievent.channel !== 10) {\r\n                if (midievent.subtype === \"noteOn\") {\r\n                    notes[i].push(midievent.noteNumber);\r\n                }\r\n                if (midievent.subtype === \"noteOff\") {\r\n                    notes[i].push(-1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (var k = 0; k < notes.length; k++) {\r\n        if (notes[k].length === 0) {\r\n            notes.splice(k, 1);\r\n        }\r\n    }\r\n    return notes;\r\n}\r\nexports.getnotes = getnotes;\r\nfunction createWaveChannelBlocks(needed) {\r\n    var baseblock = [];\r\n    baseblock.push(\"// Set track wave to channel 0 and start\\n\");\r\n    baseblock.push(\"wset 0,trackwave;\\n\");\r\n    baseblock.push(\"chwave 0,0;\\n\");\r\n    baseblock.push(\"chvolume 0,2.5;\\n\");\r\n    baseblock.push(\"chstart 0;\\n\");\r\n    baseblock.push(\"\\n\");\r\n    if (needed > 1) {\r\n        for (var i = 1; i < needed; i++) {\r\n            baseblock.push(\"// Set track wave to channel \" + i + \"and start\\n\");\r\n            baseblock.push(\"wset \" + i + \",trackwave;\\n\");\r\n            baseblock.push(\"chwave \" + i + \",\" + i + \";\\n\");\r\n            baseblock.push(\"chvolume \" + i + \",2.5;\\n\");\r\n            baseblock.push(\"chstart \" + i + \";\\n\");\r\n            baseblock.push(\"\\n\");\r\n        }\r\n    }\r\n    return baseblock;\r\n}\r\nfunction CreateDBLines(notes) {\r\n    var dblines = [];\r\n    for (var notetracknum = 0; notetracknum < notes.length; notetracknum++) {\r\n        dblines[notetracknum] = [];\r\n        dblines[notetracknum].push(\"track\" + notetracknum + \":\\n\");\r\n        while (notes[notetracknum].length) {\r\n            dblines[notetracknum].push(\"db \".concat(notes[notetracknum].splice(0, 32).join(', ')).concat(\";\\n\"));\r\n        }\r\n        dblines[notetracknum].push(\"db 0; // End string\\n\");\r\n    }\r\n    return dblines;\r\n}\r\nexports.CreateDBLines = CreateDBLines;\r\nfunction ConstructLoopBlocks(needed) {\r\n    var noteblocks = [];\r\n    noteblocks.push(\"    // Track 0\\n\");\r\n    noteblocks.push(\"note = 2;\\n\");\r\n    noteblocks.push(\"fpwr note,(track0[i]/12);\\n\");\r\n    noteblocks.push(\"note /= 100;\\n\");\r\n    noteblocks.push(\"chpitch 0,note;\\n\");\r\n    noteblocks.push(\"\\n\");\r\n    if (needed > 1) {\r\n        for (var i = 1; i < needed; i++) {\r\n            noteblocks.push(\"    // Track \" + i + \"\\n\");\r\n            noteblocks.push(\"note = 2;\\n\");\r\n            noteblocks.push(\"fpwr note,(track\" + i + \"[i]/12);\\n\");\r\n            noteblocks.push(\"note /= 100;\\n\");\r\n            noteblocks.push(\"chpitch \" + i + \",note;\\n\");\r\n            noteblocks.push(\"\\n\");\r\n        }\r\n    }\r\n    return noteblocks;\r\n}\r\nfunction ConstructBodyOfFile(NumberOfTracks, longesttrack, tempo) {\r\n    var file = [];\r\n    file.push(\"// Get track length\\n\");\r\n    file.push(\"tracklen = strlen(track\" + longesttrack + \");\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"void main()\\n\");\r\n    file.push(\"{\\n\");\r\n    file.push(\"    tempo(\" + tempo + \")\\n\");\r\n    file.push(\"\\n\");\r\n    file = file.concat(ConstructLoopBlocks(NumberOfTracks));\r\n    file.push(\"    // Index\\n\");\r\n    file.push(\"i++; mod i,tracklen;\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"    // Repeat\\n\");\r\n    file.push(\"jmp main;\\n\");\r\n    file.push(\"}\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"// Accurate tempo function for beats-per-minute\\n\");\r\n    file.push(\"void tempo( float bpm )\\n\");\r\n    file.push(\"{\\n\");\r\n    file.push(\"    timer timestamp;\\n\");\r\n    file.push(\"    while ((time - timestamp) < (60 / bpm)) { timer time; }\\n\");\r\n    file.push(\"}\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"// Returns the length of a string\\n\");\r\n    file.push(\"float strlen(char* str)\\n\");\r\n    file.push(\"{\\n\");\r\n    file.push(\"    char* strptr = str;\\n\");\r\n    file.push(\"   while (*strptr++);\\n\");\r\n    file.push(\"  return (strptr - str);\\n\");\r\n    file.push(\"}\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"float note, i;\\n\");\r\n    file.push(\"float tracklen;\\n\");\r\n    file.push(\"float time, timestamp;\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"string trackwave,\\\"synth/sine_880.wav\\\";\\n\");\r\n    file.push(\"\\n\");\r\n    return file;\r\n}\r\nfunction createFileString(dblinesin, tempo) {\r\n    var longestTrack = dblinesin.map(function (a) {\r\n        return a.length;\r\n    }).indexOf(Math.max.apply(Math, dblinesin.map(function (a) {\r\n        return a.length;\r\n    })));\r\n    var file = createWaveChannelBlocks(dblinesin.length);\r\n    file = file.concat(ConstructBodyOfFile(dblinesin.length, longestTrack, tempo));\r\n    //file.concat(require(\"fs\").readFileSync(\"header.txt\", 'utf8'));\r\n    for (var _i = 0, dblinesin_1 = dblinesin; _i < dblinesin_1.length; _i++) {\r\n        var dbline = dblinesin_1[_i];\r\n        file = file.concat(dbline);\r\n        file.push(\"\\n\");\r\n    }\r\n    return file;\r\n}\r\nexports.CreateFileString = createFileString;\r\n//# sourceMappingURL=utilityfunctions.js.map"],"sourceRoot":"/source/"}