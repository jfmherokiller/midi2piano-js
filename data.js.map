{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/downloadjs/download.js","src/MidiFile.js","src/app.js","src/processing.js","src/utilityfunctions.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","root","factory","define","amd","download","this","data","strFileName","strMimeType","dataUrlToBlob","strUrl","parts","split","type","decoder","atob","decodeURIComponent","binData","pop","mx","uiArr","Uint8Array","charCodeAt","myBlob","saver","url","winMode","anchor","href","setAttribute","fileName","className","innerHTML","style","display","document","body","appendChild","setTimeout","click","removeChild","self","URL","revokeObjectURL","test","navigator","userAgent","replace","defaultMime","window","open","confirm","location","createElement","src","blob","reader","mimeType","payload","toString","String","Blob","MozBlob","WebKitBlob","bind","indexOf","ajax","XMLHttpRequest","responseType","onload","target","response","send","msSaveBlob","tempUiArr","createObjectURL","constructor","btoa","y","encodeURIComponent","FileReader","result","readAsDataURL","__extends","d","b","__","p","hasOwnProperty","prototype","Object","create","MidiHeader","formatype","trackCount","ticksPerBeat","formatType","Chunk","newid","newlength","newdata","id","Event","Midifile","_super","MetaEvent","apply","arguments","ChannelEvent","tracks","Array","stream","StringStream","headerChunk","readChunk","headerStream","readInt16","timeDivision","header","trackChunk","trackStream","eof","event","readEvent","push","read","readInt32","deltaTime","readVarInt","eventTypeByte","readInt8","subtypeByte","subtype","number","text","channel","microsecondsPerBeat","hourByte","frameRate","0","32","64","96","hour","min","sec","frame","subframe","numerator","denominator","Math","pow","metronome","thirtyseconds","key","scale","param1","lastEventTypeByte","eventType","noteNumber","velocity","amount","controllerType","value","programNumber","inputstring","position","str","substr","signed","processing_1","readFile","evt","files","file","addEventListener","parsethefile","readAsBinaryString","getElementById","midi","midicontent","MidiFile_1","tempo","utilityfunctions_1","GetTempo","dblines","CreateDBLines","getnotes","CreateFileString","join","console","log","getTempo","filter","x","round","notes","_i","_a","midievent","k","splice","createWaveChannelBlocks","needed","baseblock","createDbLines","notetracknum","concat","constructLoopBlocks","noteblocks","constructBodyOfFile","numberOfTracks","longesttrack","createFileString","dblinesin","longestTrack","map","max","dblinesin_1","dbline"],"mappings":"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","file":"data.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data\\:[\\w+\\-]+\\/[\\w+\\-\\.]+[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar MidiHeader = (function () {\r\n    function MidiHeader(formatype, trackCount, ticksPerBeat) {\r\n        this.formatType = formatype;\r\n        this.trackCount = trackCount;\r\n        this.ticksPerBeat = ticksPerBeat;\r\n    }\r\n    return MidiHeader;\r\n}());\r\nvar Chunk = (function () {\r\n    function Chunk(newid, newlength, newdata) {\r\n        this.id = newid;\r\n        this.length = newlength;\r\n        this.data = newdata;\r\n    }\r\n    return Chunk;\r\n}());\r\nvar Event = (function () {\r\n    function Event() {\r\n    }\r\n    return Event;\r\n}());\r\nvar MetaEvent = (function (_super) {\r\n    __extends(MetaEvent, _super);\r\n    function MetaEvent() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    return MetaEvent;\r\n}(Event));\r\nvar ChannelEvent = (function (_super) {\r\n    __extends(ChannelEvent, _super);\r\n    function ChannelEvent() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    return ChannelEvent;\r\n}(Event));\r\nvar Midifile = (function () {\r\n    function Midifile(data) {\r\n        this.tracks = new Array();\r\n        var ticksPerBeat;\r\n        this.stream = new StringStream(data);\r\n        var headerChunk = this.readChunk(this.stream);\r\n        if (headerChunk.id !== \"MThd\" || headerChunk.length !== 6) {\r\n            throw \"Bad .mid file - header not found\";\r\n        }\r\n        var headerStream = new StringStream(headerChunk.data);\r\n        var formatType = headerStream.readInt16();\r\n        var trackCount = headerStream.readInt16();\r\n        var timeDivision = headerStream.readInt16();\r\n        if (timeDivision & 0x8000) {\r\n            throw \"Expressing time division in SMTPE frames is not supported yet\";\r\n        }\r\n        else {\r\n            ticksPerBeat = timeDivision;\r\n        }\r\n        this.header = new MidiHeader(formatType, trackCount, ticksPerBeat);\r\n        for (var i = 0; i < this.header.trackCount; i++) {\r\n            this.tracks[i] = new Array();\r\n            var trackChunk = this.readChunk(this.stream);\r\n            if (trackChunk.id !== \"MTrk\") {\r\n                throw \"Unexpected chunk - expected MTrk, got \" + trackChunk.id;\r\n            }\r\n            var trackStream = new StringStream(trackChunk.data);\r\n            while (!trackStream.eof()) {\r\n                var event = this.readEvent(trackStream);\r\n                this.tracks[i].push(event);\r\n            }\r\n        }\r\n    }\r\n    Midifile.prototype.readChunk = function (stream) {\r\n        var id = stream.read(4);\r\n        var length = stream.readInt32();\r\n        return new Chunk(id, length, stream.read(length));\r\n    };\r\n    Midifile.prototype.readEvent = function (stream) {\r\n        var event = {};\r\n        event.deltaTime = stream.readVarInt();\r\n        var eventTypeByte = stream.readInt8();\r\n        if ((eventTypeByte & 0xf0) === 0xf0) {\r\n            /* system / meta event */\r\n            var length;\r\n            if (eventTypeByte === 0xff) {\r\n                /* meta event */\r\n                event.type = \"meta\";\r\n                var subtypeByte = stream.readInt8();\r\n                length = stream.readVarInt();\r\n                switch (subtypeByte) {\r\n                    case 0x00:\r\n                        event.subtype = \"sequenceNumber\";\r\n                        if (length !== 2)\r\n                            throw \"Expected length for sequenceNumber event is 2, got \" + length;\r\n                        event.number = stream.readInt16();\r\n                        return event;\r\n                    case 0x01:\r\n                        event.subtype = \"text\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x02:\r\n                        event.subtype = \"copyrightNotice\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x03:\r\n                        event.subtype = \"trackName\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x04:\r\n                        event.subtype = \"instrumentName\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x05:\r\n                        event.subtype = \"lyrics\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x06:\r\n                        event.subtype = \"marker\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x07:\r\n                        event.subtype = \"cuePoint\";\r\n                        event.text = stream.read(length);\r\n                        return event;\r\n                    case 0x20:\r\n                        event.subtype = \"midiChannelPrefix\";\r\n                        if (length !== 1)\r\n                            throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\r\n                        event.channel = stream.readInt8();\r\n                        return event;\r\n                    case 0x2f:\r\n                        event.subtype = \"endOfTrack\";\r\n                        if (length !== 0)\r\n                            throw \"Expected length for endOfTrack event is 0, got \" + length;\r\n                        return event;\r\n                    case 0x51:\r\n                        event.subtype = \"setTempo\";\r\n                        if (length !== 3)\r\n                            throw \"Expected length for setTempo event is 3, got \" + length;\r\n                        event.microsecondsPerBeat = ((stream.readInt8() << 16)\r\n                            + (stream.readInt8() << 8)\r\n                            + stream.readInt8());\r\n                        return event;\r\n                    case 0x54:\r\n                        event.subtype = \"smpteOffset\";\r\n                        if (length !== 5)\r\n                            throw \"Expected length for smpteOffset event is 5, got \" + length;\r\n                        var hourByte = stream.readInt8();\r\n                        event.frameRate = {\r\n                            0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\r\n                        }[hourByte & 0x60];\r\n                        event.hour = hourByte & 0x1f;\r\n                        event.min = stream.readInt8();\r\n                        event.sec = stream.readInt8();\r\n                        event.frame = stream.readInt8();\r\n                        event.subframe = stream.readInt8();\r\n                        return event;\r\n                    case 0x58:\r\n                        event.subtype = \"timeSignature\";\r\n                        if (length !== 4)\r\n                            throw \"Expected length for timeSignature event is 4, got \" + length;\r\n                        event.numerator = stream.readInt8();\r\n                        event.denominator = Math.pow(2, stream.readInt8());\r\n                        event.metronome = stream.readInt8();\r\n                        event.thirtyseconds = stream.readInt8();\r\n                        return event;\r\n                    case 0x59:\r\n                        event.subtype = \"keySignature\";\r\n                        if (length !== 2)\r\n                            throw \"Expected length for keySignature event is 2, got \" + length;\r\n                        event.key = stream.readInt8(true);\r\n                        event.scale = stream.readInt8();\r\n                        return event;\r\n                    case 0x7f:\r\n                        event.subtype = \"sequencerSpecific\";\r\n                        event.data = stream.read(length);\r\n                        return event;\r\n                    default:\r\n                        // console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\r\n                        event.subtype = \"unknown\";\r\n                        event.data = stream.read(length);\r\n                        return event;\r\n                }\r\n            }\r\n            else if (eventTypeByte === 0xf0) {\r\n                event.type = \"sysEx\";\r\n                length = stream.readVarInt();\r\n                event.data = stream.read(length);\r\n                return event;\r\n            }\r\n            else if (eventTypeByte === 0xf7) {\r\n                event.type = \"dividedSysEx\";\r\n                length = stream.readVarInt();\r\n                event.data = stream.read(length);\r\n                return event;\r\n            }\r\n            else {\r\n                throw \"Unrecognised MIDI event type byte: \" + eventTypeByte;\r\n            }\r\n        }\r\n        else {\r\n            /* channel event */\r\n            var param1;\r\n            if ((eventTypeByte & 0x80) === 0) {\r\n                /* running status - reuse lastEventTypeByte as the event type.\r\n                    eventTypeByte is actually the first parameter\r\n                */\r\n                param1 = eventTypeByte;\r\n                eventTypeByte = this.lastEventTypeByte;\r\n            }\r\n            else {\r\n                param1 = stream.readInt8();\r\n                this.lastEventTypeByte = eventTypeByte;\r\n            }\r\n            var eventType = eventTypeByte >> 4;\r\n            event.channel = eventTypeByte & 0x0f;\r\n            event.type = \"channel\";\r\n            switch (eventType) {\r\n                case 0x08:\r\n                    event.subtype = \"noteOff\";\r\n                    event.noteNumber = param1;\r\n                    event.velocity = stream.readInt8();\r\n                    return event;\r\n                case 0x09:\r\n                    event.noteNumber = param1;\r\n                    event.velocity = stream.readInt8();\r\n                    if (event.velocity === 0) {\r\n                        event.subtype = \"noteOff\";\r\n                    }\r\n                    else {\r\n                        event.subtype = \"noteOn\";\r\n                    }\r\n                    return event;\r\n                case 0x0a:\r\n                    event.subtype = \"noteAftertouch\";\r\n                    event.noteNumber = param1;\r\n                    event.amount = stream.readInt8();\r\n                    return event;\r\n                case 0x0b:\r\n                    event.subtype = \"controller\";\r\n                    event.controllerType = param1;\r\n                    event.value = stream.readInt8();\r\n                    return event;\r\n                case 0x0c:\r\n                    event.subtype = \"programChange\";\r\n                    event.programNumber = param1;\r\n                    return event;\r\n                case 0x0d:\r\n                    event.subtype = \"channelAftertouch\";\r\n                    event.amount = param1;\r\n                    return event;\r\n                case 0x0e:\r\n                    event.subtype = \"pitchBend\";\r\n                    event.value = param1 + (stream.readInt8() << 7);\r\n                    return event;\r\n                default:\r\n                    throw \"Unrecognised MIDI event type: \" + eventType;\r\n            }\r\n        }\r\n    };\r\n    return Midifile;\r\n}());\r\nexports.Midifile = Midifile;\r\n//function midiFile(data) {\r\n//    var ticksPerBeat = 0;\r\n//    function readChunk(stream: StringStream) {\r\n//        var id = stream.read(4);\r\n//        var length: number = stream.readInt32();\r\n//        return new Chunk(id, length, stream.read(length));\r\n//    }\r\n//    var lastEventTypeByte;\r\n//    function readEvent(stream) {\r\n//        var event: IEvent;\r\n//        event.deltaTime = stream.readVarInt();\r\n//        var eventTypeByte = stream.readInt8();\r\n//        if ((eventTypeByte & 0xf0) == 0xf0) {\r\n//            /* system / meta event */\r\n//            if (eventTypeByte == 0xff) {\r\n//                /* meta event */\r\n//                event.type = 'meta';\r\n//                var subtypeByte = stream.readInt8();\r\n//                var length = stream.readVarInt();\r\n//                switch (subtypeByte) {\r\n//                    case 0x00:\r\n//                        event.subtype = 'sequenceNumber';\r\n//                        if (length != 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\r\n//                        event.number = stream.readInt16();\r\n//                        return event;\r\n//                    case 0x01:\r\n//                        event.subtype = 'text';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x02:\r\n//                        event.subtype = 'copyrightNotice';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x03:\r\n//                        event.subtype = 'trackName';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x04:\r\n//                        event.subtype = 'instrumentName';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x05:\r\n//                        event.subtype = 'lyrics';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x06:\r\n//                        event.subtype = 'marker';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x07:\r\n//                        event.subtype = 'cuePoint';\r\n//                        event.text = stream.read(length);\r\n//                        return event;\r\n//                    case 0x20:\r\n//                        event.subtype = 'midiChannelPrefix';\r\n//                        if (length != 1) throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\r\n//                        event.channel = stream.readInt8();\r\n//                        return event;\r\n//                    case 0x2f:\r\n//                        event.subtype = 'endOfTrack';\r\n//                        if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\r\n//                        return event;\r\n//                    case 0x51:\r\n//                        event.subtype = 'setTempo';\r\n//                        if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\r\n//                        event.microsecondsPerBeat = (\r\n//                            (stream.readInt8() << 16)\r\n//                            + (stream.readInt8() << 8)\r\n//                            + stream.readInt8()\r\n//                        );\r\n//                        return event;\r\n//                    case 0x54:\r\n//                        event.subtype = 'smpteOffset';\r\n//                        if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\r\n//                        var hourByte = stream.readInt8();\r\n//                        event.frameRate = {\r\n//                            0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\r\n//                        }[hourByte & 0x60];\r\n//                        event.hour = hourByte & 0x1f;\r\n//                        event.min = stream.readInt8();\r\n//                        event.sec = stream.readInt8();\r\n//                        event.frame = stream.readInt8();\r\n//                        event.subframe = stream.readInt8();\r\n//                        return event;\r\n//                    case 0x58:\r\n//                        event.subtype = 'timeSignature';\r\n//                        if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\r\n//                        event.numerator = stream.readInt8();\r\n//                        event.denominator = Math.pow(2, stream.readInt8());\r\n//                        event.metronome = stream.readInt8();\r\n//                        event.thirtyseconds = stream.readInt8();\r\n//                        return event;\r\n//                    case 0x59:\r\n//                        event.subtype = 'keySignature';\r\n//                        if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\r\n//                        event.key = stream.readInt8(true);\r\n//                        event.scale = stream.readInt8();\r\n//                        return event;\r\n//                    case 0x7f:\r\n//                        event.subtype = 'sequencerSpecific';\r\n//                        event.data = stream.read(length);\r\n//                        return event;\r\n//                    default:\r\n//                        // console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\r\n//                        event.subtype = 'unknown';\r\n//                        event.data = stream.read(length);\r\n//                        return event;\r\n//                }\r\n//                event.data = stream.read(length);\r\n//                return event;\r\n//            } else if (eventTypeByte == 0xf0) {\r\n//                event.type = 'sysEx';\r\n//                var length = stream.readVarInt();\r\n//                event.data = stream.read(length);\r\n//                return event;\r\n//            } else if (eventTypeByte == 0xf7) {\r\n//                event.type = 'dividedSysEx';\r\n//                var length = stream.readVarInt();\r\n//                event.data = stream.read(length);\r\n//                return event;\r\n//            } else {\r\n//                throw \"Unrecognised MIDI event type byte: \" + eventTypeByte;\r\n//            }\r\n//        } else {\r\n//            /* channel event */\r\n//            var param1;\r\n//            if ((eventTypeByte & 0x80) == 0) {\r\n//\t\t\t\t/* running status - reuse lastEventTypeByte as the event type.\r\n//\t\t\t\t\teventTypeByte is actually the first parameter\r\n//\t\t\t\t*/\r\n//                param1 = eventTypeByte;\r\n//                eventTypeByte = lastEventTypeByte;\r\n//            } else {\r\n//                param1 = stream.readInt8();\r\n//                lastEventTypeByte = eventTypeByte;\r\n//            }\r\n//            var eventType = eventTypeByte >> 4;\r\n//            event.channel = eventTypeByte & 0x0f;\r\n//            event.type = 'channel';\r\n//            switch (eventType) {\r\n//                case 0x08:\r\n//                    event.subtype = 'noteOff';\r\n//                    event.noteNumber = param1;\r\n//                    event.velocity = stream.readInt8();\r\n//                    return event;\r\n//                case 0x09:\r\n//                    event.noteNumber = param1;\r\n//                    event.velocity = stream.readInt8();\r\n//                    if (event.velocity == 0) {\r\n//                        event.subtype = 'noteOff';\r\n//                    } else {\r\n//                        event.subtype = 'noteOn';\r\n//                    }\r\n//                    return event;\r\n//                case 0x0a:\r\n//                    event.subtype = 'noteAftertouch';\r\n//                    event.noteNumber = param1;\r\n//                    event.amount = stream.readInt8();\r\n//                    return event;\r\n//                case 0x0b:\r\n//                    event.subtype = 'controller';\r\n//                    event.controllerType = param1;\r\n//                    event.value = stream.readInt8();\r\n//                    return event;\r\n//                case 0x0c:\r\n//                    event.subtype = 'programChange';\r\n//                    event.programNumber = param1;\r\n//                    return event;\r\n//                case 0x0d:\r\n//                    event.subtype = 'channelAftertouch';\r\n//                    event.amount = param1;\r\n//                    return event;\r\n//                case 0x0e:\r\n//                    event.subtype = 'pitchBend';\r\n//                    event.value = param1 + (stream.readInt8() << 7);\r\n//                    return event;\r\n//                default:\r\n//                    throw \"Unrecognised MIDI event type: \" + eventType;\r\n//                /* \r\n//                console.log(\"Unrecognised MIDI event type: \" + eventType);\r\n//                stream.readInt8();\r\n//                event.subtype = 'unknown';\r\n//                return event;\r\n//                */\r\n//            }\r\n//        }\r\n//    }\r\n//    var stream = new StringStream(data);\r\n//    var headerChunk = readChunk(stream);\r\n//    if (headerChunk.id != 'MThd' || headerChunk.length != 6) {\r\n//        throw \"Bad .mid file - header not found\";\r\n//    }\r\n//    var headerStream = new StringStream(headerChunk.data);\r\n//    var formatType = headerStream.readInt16();\r\n//    var trackCount = headerStream.readInt16();\r\n//    var timeDivision = headerStream.readInt16();\r\n//    if (timeDivision & 0x8000) {\r\n//        throw \"Expressing time division in SMTPE frames is not supported yet\";\r\n//    } else {\r\n//        ticksPerBeat = timeDivision;\r\n//    }\r\n//    var header: IMidiheader = {\r\n//        'formatType': formatType,\r\n//        'trackCount': trackCount,\r\n//        'ticksPerBeat': ticksPerBeat\r\n//    };\r\n//    var tracks = [];\r\n//    for (var i = 0; i < header.trackCount; i++) {\r\n//        tracks[i] = [];\r\n//        var trackChunk = readChunk(stream);\r\n//        if (trackChunk.id != 'MTrk') {\r\n//            throw \"Unexpected chunk - expected MTrk, got \" + trackChunk.id;\r\n//        }\r\n//        var trackStream = new StringStream(trackChunk.data);\r\n//        while (!trackStream.eof()) {\r\n//            var event = readEvent(trackStream);\r\n//            tracks[i].push(event);\r\n//            //console.log(event);\r\n//        }\r\n//    }\r\n//    return {\r\n//        'header': header,\r\n//        'tracks': tracks\r\n//    };\r\n//};\r\n/* Wrapper for accessing strings through sequential reads */\r\nvar StringStream = (function () {\r\n    function StringStream(inputstring) {\r\n        this.position = 0;\r\n        this.str = inputstring;\r\n    }\r\n    StringStream.prototype.read = function (length) {\r\n        var result = this.str.substr(this.position, length);\r\n        this.position += length;\r\n        return result;\r\n    };\r\n    /* read a big-endian 32-bit integer */\r\n    StringStream.prototype.readInt32 = function () {\r\n        var result = ((this.str.charCodeAt(this.position) << 24)\r\n            + (this.str.charCodeAt(this.position + 1) << 16)\r\n            + (this.str.charCodeAt(this.position + 2) << 8)\r\n            + this.str.charCodeAt(this.position + 3));\r\n        this.position += 4;\r\n        return result;\r\n    };\r\n    /* read a big-endian 16-bit integer */\r\n    StringStream.prototype.readInt16 = function () {\r\n        var result = ((this.str.charCodeAt(this.position) << 8)\r\n            + this.str.charCodeAt(this.position + 1));\r\n        this.position += 2;\r\n        return result;\r\n    };\r\n    /* read an 8-bit integer */\r\n    StringStream.prototype.readInt8 = function (signed) {\r\n        var result = this.str.charCodeAt(this.position);\r\n        if (signed && result > 127) {\r\n            result -= 256;\r\n        }\r\n        this.position += 1;\r\n        return result;\r\n    };\r\n    StringStream.prototype.eof = function () {\r\n        return this.position >= this.str.length;\r\n    };\r\n    /* read a MIDI-style variable-length integer\r\n        (big-endian value in groups of 7 bits,\r\n        with top bit set to signify that another byte follows)\r\n    */\r\n    StringStream.prototype.readVarInt = function () {\r\n        var result = 0;\r\n        while (true) {\r\n            var b = this.readInt8();\r\n            if (b & 0x80) {\r\n                result += (b & 0x7f);\r\n                result <<= 7;\r\n            }\r\n            else {\r\n                /* b is the last byte */\r\n                return result + b;\r\n            }\r\n        }\r\n    };\r\n    return StringStream;\r\n}());\r\n/* Wrapper for accessing strings through sequential reads */\r\n//function Stream(str) {\r\n//    var position = 0;\r\n//    function read(length) {\r\n//        var result = str.substr(position, length);\r\n//        position += length;\r\n//        return result;\r\n//    }\r\n//    /* read a big-endian 32-bit integer */\r\n//    function readInt32() {\r\n//        var result = (\r\n//            (str.charCodeAt(position) << 24)\r\n//            + (str.charCodeAt(position + 1) << 16)\r\n//            + (str.charCodeAt(position + 2) << 8)\r\n//            + str.charCodeAt(position + 3));\r\n//        position += 4;\r\n//        return result;\r\n//    }\r\n//    /* read a big-endian 16-bit integer */\r\n//    function readInt16() {\r\n//        var result = (\r\n//            (str.charCodeAt(position) << 8)\r\n//            + str.charCodeAt(position + 1));\r\n//        position += 2;\r\n//        return result;\r\n//    }\r\n//    /* read an 8-bit integer */\r\n//    function readInt8(signed) {\r\n//        var result = str.charCodeAt(position);\r\n//        if (signed && result > 127) result -= 256;\r\n//        position += 1;\r\n//        return result;\r\n//    }\r\n//    function eof() {\r\n//        return position >= str.length;\r\n//    }\r\n//\t/* read a MIDI-style variable-length integer\r\n//\t\t(big-endian value in groups of 7 bits,\r\n//\t\twith top bit set to signify that another byte follows)\r\n//\t*/\r\n//    function readVarInt() {\r\n//        var result = 0;\r\n//        while (true) {\r\n//            var b = readInt8();\r\n//            if (b & 0x80) {\r\n//                result += (b & 0x7f);\r\n//                result <<= 7;\r\n//            } else {\r\n//                /* b is the last byte */\r\n//                return result + b;\r\n//            }\r\n//        }\r\n//    }\r\n//    return {\r\n//        'eof': eof,\r\n//        'read': read,\r\n//        'readInt32': readInt32,\r\n//        'readInt16': readInt16,\r\n//        'readInt8': readInt8,\r\n//        'readVarInt': readVarInt\r\n//    };\r\n//}\r\n//# sourceMappingURL=MidiFile.js.map","\"use strict\";\r\nvar processing_1 = require(\"./processing\");\r\nwindow.onload = function () {\r\n    document.getElementById(\"file\").addEventListener(\"change\", readFile, false);\r\n    function readFile(evt) {\r\n        var files = evt.target.files;\r\n        var file = files[0];\r\n        var reader = new FileReader();\r\n        reader.addEventListener(\"load\", function () {\r\n            processing_1.parsethefile(reader.result);\r\n        });\r\n        reader.readAsBinaryString(file);\r\n    }\r\n};\r\n//# sourceMappingURL=app.js.map","\"use strict\";\r\n///<reference path=\"../typings/globals/node/index.d.ts\" />\r\nvar MidiFile_1 = require(\"./MidiFile\");\r\nvar utilityfunctions_1 = require(\"./utilityfunctions\");\r\nfunction parsethefile(midi) {\r\n    var midicontent = new MidiFile_1.Midifile(midi);\r\n    var tempo = utilityfunctions_1.GetTempo(midicontent);\r\n    var dblines = utilityfunctions_1.CreateDBLines(utilityfunctions_1.getnotes(midicontent));\r\n    var file = utilityfunctions_1.CreateFileString(dblines, tempo);\r\n    var download = require(\"downloadjs\");\r\n    download(file.join(\"\"), \"songtest.txt\", \"text/plain\");\r\n    console.log(\"AAAAAAA\");\r\n}\r\nexports.parsethefile = parsethefile;\r\n//# sourceMappingURL=processing.js.map","/**\r\n * Created by jfmmeyers on 9/14/16.\r\n */\r\n\"use strict\";\r\nfunction getTempo(midi) {\r\n    var tempo = midi.tracks[0].filter(function (x) { return x.microsecondsPerBeat != null; })[0].microsecondsPerBeat;\r\n    tempo = 60000000 / tempo;\r\n    tempo = Math.round(tempo);\r\n    return tempo * 10;\r\n}\r\nexports.GetTempo = getTempo;\r\nfunction getnotes(midi) {\r\n    var notes = [];\r\n    for (var i = 0; i < midi.tracks.length; i++) {\r\n        notes[i] = [];\r\n        for (var _i = 0, _a = midi.tracks[i]; _i < _a.length; _i++) {\r\n            var midievent = _a[_i];\r\n            if (midievent.channel !== 10) {\r\n                if (midievent.subtype === \"noteOn\") {\r\n                    notes[i].push(midievent.noteNumber);\r\n                }\r\n                if (midievent.subtype === \"noteOff\") {\r\n                    notes[i].push(-1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (var k = 0; k < notes.length; k++) {\r\n        if (notes[k].length === 0) {\r\n            notes.splice(k, 1);\r\n        }\r\n    }\r\n    return notes;\r\n}\r\nexports.getnotes = getnotes;\r\nfunction createWaveChannelBlocks(needed) {\r\n    var baseblock = [];\r\n    baseblock.push(\"// Set track wave to channel 0 and start\\n\");\r\n    baseblock.push(\"wset 0,trackwave;\\n\");\r\n    baseblock.push(\"chwave 0,0;\\n\");\r\n    baseblock.push(\"chvolume 0,2.5;\\n\");\r\n    baseblock.push(\"chstart 0;\\n\");\r\n    baseblock.push(\"\\n\");\r\n    if (needed > 1) {\r\n        for (var i = 1; i < needed; i++) {\r\n            baseblock.push(\"// Set track wave to channel \" + i + \"and start\\n\");\r\n            baseblock.push(\"wset \" + i + \",trackwave;\\n\");\r\n            baseblock.push(\"chwave \" + i + \",\" + i + \";\\n\");\r\n            baseblock.push(\"chvolume \" + i + \",2.5;\\n\");\r\n            baseblock.push(\"chstart \" + i + \";\\n\");\r\n            baseblock.push(\"\\n\");\r\n        }\r\n    }\r\n    return baseblock;\r\n}\r\nfunction createDbLines(notes) {\r\n    var dblines = [];\r\n    for (var notetracknum = 0; notetracknum < notes.length; notetracknum++) {\r\n        dblines[notetracknum] = [];\r\n        dblines[notetracknum].push(\"track\" + notetracknum + \":\\n\");\r\n        while (notes[notetracknum].length) {\r\n            dblines[notetracknum].push(\"db \".concat(notes[notetracknum].splice(0, 32).join(', ')).concat(\";\\n\"));\r\n        }\r\n        dblines[notetracknum].push(\"db 0; // End string\\n\");\r\n    }\r\n    return dblines;\r\n}\r\nexports.CreateDBLines = createDbLines;\r\nfunction constructLoopBlocks(needed) {\r\n    var noteblocks = [];\r\n    noteblocks.push(\"    // Track 0\\n\");\r\n    noteblocks.push(\"note = 2;\\n\");\r\n    noteblocks.push(\"fpwr note,(track0[i]/12);\\n\");\r\n    noteblocks.push(\"note /= 100;\\n\");\r\n    noteblocks.push(\"chpitch 0,note;\\n\");\r\n    noteblocks.push(\"\\n\");\r\n    if (needed > 1) {\r\n        for (var i = 1; i < needed; i++) {\r\n            noteblocks.push(\"    // Track \" + i + \"\\n\");\r\n            noteblocks.push(\"note = 2;\\n\");\r\n            noteblocks.push(\"fpwr note,(track\" + i + \"[i]/12);\\n\");\r\n            noteblocks.push(\"note /= 100;\\n\");\r\n            noteblocks.push(\"chpitch \" + i + \",note;\\n\");\r\n            noteblocks.push(\"\\n\");\r\n        }\r\n    }\r\n    return noteblocks;\r\n}\r\nfunction constructBodyOfFile(numberOfTracks, longesttrack, tempo) {\r\n    var file = [];\r\n    file.push(\"// Get track length\\n\");\r\n    file.push(\"tracklen = strlen(track\" + longesttrack + \");\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"void main()\\n\");\r\n    file.push(\"{\\n\");\r\n    file.push(\"    tempo(\" + tempo + \")\\n\");\r\n    file.push(\"\\n\");\r\n    file = file.concat(constructLoopBlocks(numberOfTracks));\r\n    file.push(\"    // Index\\n\");\r\n    file.push(\"i++; mod i,tracklen;\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"    // Repeat\\n\");\r\n    file.push(\"jmp main;\\n\");\r\n    file.push(\"}\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"// Accurate tempo function for beats-per-minute\\n\");\r\n    file.push(\"void tempo( float bpm )\\n\");\r\n    file.push(\"{\\n\");\r\n    file.push(\"    timer timestamp;\\n\");\r\n    file.push(\"    while ((time - timestamp) < (60 / bpm)) { timer time; }\\n\");\r\n    file.push(\"}\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"// Returns the length of a string\\n\");\r\n    file.push(\"float strlen(char* str)\\n\");\r\n    file.push(\"{\\n\");\r\n    file.push(\"    char* strptr = str;\\n\");\r\n    file.push(\"   while (*strptr++);\\n\");\r\n    file.push(\"  return (strptr - str);\\n\");\r\n    file.push(\"}\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"float note, i;\\n\");\r\n    file.push(\"float tracklen;\\n\");\r\n    file.push(\"float time, timestamp;\\n\");\r\n    file.push(\"\\n\");\r\n    file.push(\"string trackwave,\\\"synth/sine_880.wav\\\";\\n\");\r\n    file.push(\"\\n\");\r\n    return file;\r\n}\r\nfunction createFileString(dblinesin, tempo) {\r\n    var longestTrack = dblinesin.map(function (a) {\r\n        return a.length;\r\n    }).indexOf(Math.max.apply(Math, dblinesin.map(function (a) {\r\n        return a.length;\r\n    })));\r\n    var file = createWaveChannelBlocks(dblinesin.length);\r\n    file = file.concat(constructBodyOfFile(dblinesin.length, longestTrack, tempo));\r\n    //file.concat(require(\"fs\").readFileSync(\"header.txt\", 'utf8'));\r\n    for (var _i = 0, dblinesin_1 = dblinesin; _i < dblinesin_1.length; _i++) {\r\n        var dbline = dblinesin_1[_i];\r\n        file = file.concat(dbline);\r\n        file.push(\"\\n\");\r\n    }\r\n    return file;\r\n}\r\nexports.CreateFileString = createFileString;\r\n//# sourceMappingURL=utilityfunctions.js.map"],"sourceRoot":"/source/"}